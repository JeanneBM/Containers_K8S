* kubectl apply -f *.yaml 
* kubectl create -f *.yaml
* kubectl replace -f *.yaml --force

* kubectl get pod
* kubectl get pv, pvc
* kubectl get pods --all-namespaces
* kubectl get svc -n=marketing

* kubectl describe pod newpods-j7vsf
* kubectl edit rs new-replica-set

* kubectl run nginx --image=nginx
* kubectl run redis --image=redis123 --dry-run=client -o yaml > redis.yaml
* kubectl run custom-nginx --image=nginx --port=8080
* kubectl run httpd --image=httpd:alpine --port=80 --expose=true
* kubectl run webapp-green --image=kodekloud/webapp-color -- --color=green
* kubectl run redis --image=redis:alpine --labels="tier=db"

* kubectl run nginx --image=nginx --port=80 --env="ENV_VAR1=value1" --env="ENV_VAR2=value2" --labels="app=nginx,env=production,team=frontend" --annotations="description=NGINX Pod,maintainer=devops@example.com" --overrides='{ "apiVersion": "v1", "spec": { "containers": [ { "name": "nginx", "image": "nginx", "resources": { "limits": { "cpu": "500m", "memory": "1Gi" }, "requests": { "cpu": "250m", "memory": "512Mi" } }, "env": [ { "name": "ENV_VAR1", "value": "value1" }, { "name": "ENV_VAR2", "value": "value2" } ] } ] } }' --dry-run=client

--port=80
--env="ENV_VAR1=value1" i --env="ENV_VAR2=value2"
--labels="app=nginx,env=production,team=frontend"
--annotations="description=NGINX Pod,maintainer=devops@example.com"
--overrides='...'

flagi, które wyszły z użycia - Pod:
--limits="cpu=500m,memory=1Gi"
--requests="cpu=250m,memory=512Mi"
* kubectl set resources pod nginx --limits=cpu=500m,memory=1Gi --requests=cpu=250m,memory=512Mi

* kubectl create deployment webapp --namespace=dev-ns --image=kodekloud/webapp-color --replicas=5 --port=8080 
--namespace=dev-ns
--image=kodekloud/webapp-color
--replicas=5
--port=8080

flagi, które wyszły z użycia - Deploy:
--env="ENV_VAR1=value1" i --env="ENV_VAR2=value2"
--limits="cpu=500m,memory=1Gi"
--requests="cpu=250m,memory=512Mi"
--labels="app=webapp,env=development"
--annotations="description=Web App Deployment,maintainer=devops@example.com"
--dry-run=client
zamiast flag:
* kubectl set resources deployment webapp --limits=cpu=500m,memory=1Gi --requests=cpu=250m,memory=512Mi
* kubectl set env deployment webapp --env="ENV_VAR1=value1" --env="ENV_VAR2=value2" 
* kubectl label deployment webapp app=webapp env=development
* kubectl annotate deployment webapp description="Web App Deployment" maintainer="devops@example.com"


* kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue --from-literal=APP_OTHER=disregard
* kubectl create sa dashboard-sa
* kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123

* kubectl create cronjob complex-cronjob --image=busybox --schedule="*/5 * * * *"  
* kubectl set env --local -f - --keys=key1,key2  | 
* kubectl label --local -f - 'environment=prod'

--schedule="*/5 * * * *"  //every 5 min
--schedule="*/15 * * * *" //every 15 min
--schedule="0 * * * *" //every hour
--schedule="0 0 1 * *" //every month
--schedule="0 0 15 * *" // 15th every month
--schedule="15 12 * * *" //every day at 12:15

--schedule="0 */2 * * *" // every 2h
--schedule="0 0 1 */2 *" // 1st day every 2 month
--schedule="15 14 18 */2 *" // 18th day of every 2nd month at 14:15


* kubectl create token dashboard-sa

* kubectl expose pod redis --port 6379 --name redis-service
* kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml

* kubectl scale deployment --replicas=1 frontend-v2
* kubectl scale deployment frontend --replicas=0; kubectl scale deployment frontend-v2 --replicas=5

* kubectl exec ubuntu-sleeper -- whoami

* kubectl delete pod new-replica-set-89c85 new-replica-set-jmks6 new-replica-set-tlhk2 new-replica-set-46ll7

* kubectl taint nodes node01 spray=mortein:NoSchedule
* kubectl proxy 8001& //uruchamia serwer proxy Kubernetes na porcie 8001 w &tle
* kubectl explain replicaset








curl localhost:8001/apis/authorization.k8s.io
cp -v /etc/kubernetes/manifests/kube-apiserver.yaml /root/kube-apiserver.yaml.backup
vim /etc/kubernetes/manifests/kube-apiserver.yaml
curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl-convert
chmod +x kubectl-convert
mv kubectl-convert /usr/local/bin/kubectl-convert
kubectl-convert -f ingress-old.yaml --output-version networking.k8s.io/v1 | kubectl apply -f -



uname -a
